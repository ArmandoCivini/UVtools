//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: Anycubic PhotonS
//   Authors: Tiago Conceição
//------------------------------------------------

BigEndian();

typedef struct() {
    uint32 Unknown1 <fgcolor=cBlack, bgcolor=cWhite>; // 44944
    uint32 Unknown2 <fgcolor=cBlack, bgcolor=cWhite>; // 0
    uint32 Unknown3 <fgcolor=cBlack, bgcolor=cWhite>; // 0
    uint32 ResolutionX <fgcolor=cBlack, bgcolor=cWhite>;
    uint32 ResolutionY <fgcolor=cBlack, bgcolor=cWhite>;
    uint32 DataSize <fgcolor=cBlack, bgcolor=cWhite>;
    uint32 Unknown4 <fgcolor=cBlack, bgcolor=cWhite>; // 2684702720
    BYTE LayerRLE[DataSize / 8 - 4] <fgcolor=cBlack, bgcolor=cRed>;
} layerData;

typedef struct(int size) {
    BYTE layerDataBlock[size] <fgcolor=cBlack, bgcolor=0x00FF00>;
} rgbPreviewImageRawData;

struct HEADER {
    uint32 Tag1 <fgcolor=cBlack, bgcolor=cRed>; // 2
    uint16 Tag2 <fgcolor=cBlack, bgcolor=cRed>; // 49
    double XYPixelSize <fgcolor=cBlack, bgcolor=cRed>;
    double LayerHeight <fgcolor=cBlack, bgcolor=cRed>;
    double ExposureSeconds <fgcolor=cBlack, bgcolor=cRed>;
    double LightOffDelay <fgcolor=cBlack, bgcolor=cRed>;
    
    double BottomExposureSeconds <fgcolor=cBlack, bgcolor=cRed>;
    uint32 BottomLayerCount <fgcolor=cBlack, bgcolor=cRed>;
    double LiftHeight <fgcolor=cBlack, bgcolor=cRed>;   // mm
    double LiftSpeed <fgcolor=cBlack, bgcolor=cRed>;    // mm/s
    double RetractSpeed <fgcolor=cBlack, bgcolor=cRed>; // mm/s
    double VolumeMl <fgcolor=cBlack, bgcolor=cRed>;     // ml
    uint32 PreviewResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Unknown1 <fgcolor=cBlack, bgcolor=cRed>; // 42
    uint32 PreviewResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Unknown2 <fgcolor=cBlack, bgcolor=cRed>; // 10

    rgbPreviewImageRawData preview(PreviewResolutionX*PreviewResolutionY*2);
    uint32 LayerCount <fgcolor=cBlack, bgcolor=cRed>;
} header;

struct LAYERS {
    local int i;
    for( i = 0; i < header.LayerCount; i++ ){
        layerData lD();
    }
} layers;
