//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: Longer Orange 10, 30
//   Authors: Tiago Conceição
//------------------------------------------------

LittleEndian();

typedef struct() {
    uint32 DataSize <fgcolor=cBlack, bgcolor=cWhite>;
    BYTE LayerRLE[DataSize] <fgcolor=cBlack, bgcolor=cRed>;
} layerData;

typedef struct(int size) {
    BYTE layerDataBlock[size] <fgcolor=cBlack, bgcolor=0x00FF00>;
} rgbPreviewImageRawData;

struct HEADER {
    char Name[8] <fgcolor=cBlack, bgcolor=cWhite>;
    uint32 Uint_08 <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_0C <fgcolor=cBlack, bgcolor=cRed>;
    uint32 PrinterModel <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_14 <fgcolor=cBlack, bgcolor=cRed>;
    uint32 MagicKey <fgcolor=cBlack, bgcolor=cRed>;
    
    float PixelPerMmX <fgcolor=cBlack, bgcolor=cRed>;
    float PixelPerMmY <fgcolor=cBlack, bgcolor=cRed>;
    float ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    float ResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    float LayerHeight <fgcolor=cBlack, bgcolor=cRed>;
    float ExposureTimeMs <fgcolor=cBlack, bgcolor=cRed>;
    float BottomExposureTimeMs <fgcolor=cBlack, bgcolor=cRed>;
    float Float_38 <fgcolor=cBlack, bgcolor=cRed>;
    float LightOffDelayMs <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLightOffDelayMs <fgcolor=cBlack, bgcolor=cRed>;
    float BottomHeight <fgcolor=cBlack, bgcolor=cRed>;
    float Float_48 <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float LiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed_ <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftSpeed_ <fgcolor=cBlack, bgcolor=cRed>;
    float Float_64 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_68 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_6c <fgcolor=cBlack, bgcolor=cRed>;
    float Float_70 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_74 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_78 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_7c <fgcolor=cBlack, bgcolor=cRed>;
    float Float_80 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_84 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_88 <fgcolor=cBlack, bgcolor=cRed>;
    float Float_8c <fgcolor=cBlack, bgcolor=cRed>;
    float Float_90 <fgcolor=cBlack, bgcolor=cRed>;
    float MachineZ <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_98 <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_9c <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_a0 <fgcolor=cBlack, bgcolor=cRed>;
    uint32 LayerCount <fgcolor=cBlack, bgcolor=cRed>;
    uint32 Uint_a8 <fgcolor=cBlack, bgcolor=cRed>;
    uint32 PreviewSizeX <fgcolor=cBlack, bgcolor=cRed>;
    uint32 PreviewSizeY <fgcolor=cBlack, bgcolor=cRed>;

    rgbPreviewImageRawData preview(PreviewSizeX*PreviewSizeY*2);

    if(PrinterModel == 120) // .lgs120
    {
        uint32 pngLength <fgcolor=cBlack, bgcolor=cRed>;
        byte png[pngLength] <fgcolor=cBlack, bgcolor=cYellow>;
    }
} header;

struct LAYERS {
    local int i;
    for( i = 0; i < header.LayerCount; i++ ){
        layerData lD();
    }
} layers;
