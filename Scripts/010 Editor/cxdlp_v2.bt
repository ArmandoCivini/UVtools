//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: Creality
//   Authors: Julien Delnatte
//------------------------------------------------
// CHANGELOG:
// Add uint16 unknown after header (Set to 2)
// Add uint32 modelSize and ubyte model[modelSize] after unknown
// Add ubyte offset[64] after resolutionY (Zeros)


BigEndian();

typedef struct {
    BitfieldDisablePadding();    ushort startY:13;    ushort endY:13;    ushort x:14;
    ubyte grey <fgcolor=cBlack, bgcolor=cWhite>;
} layerPointsData;

typedef struct {
    uint32 layerArea <fgcolor=cBlack, bgcolor=cWhite>;
} layerDef;

typedef struct() {
    uint32 layerArea <fgcolor=cBlack, bgcolor=cWhite>;
    uint32 layerPointNum <fgcolor=cBlack, bgcolor=cWhite>;

    layerPointsData pD()[layerPointNum];
    ubyte CR_LF2[2] <fgcolor=cBlack, bgcolor=cRed>;
} layerData;

typedef struct(int size) {
    ubyte layerDataBlock[size] <fgcolor=cBlack, bgcolor=0x00FF00>;
} rgbPreviewImageRawData;

struct HEADER {
    uint32 headerSize <fgcolor=cBlack, bgcolor=cWhite>;
    char header[headerSize] <fgcolor=cBlack, bgcolor=cRed>;

    uint16 version <fgcolor=cBlack, bgcolor=cWhite>;

    uint32 modelSize <fgcolor=cBlack, bgcolor=cWhite>;
    char model[modelSize] <fgcolor=cBlack, bgcolor=cRed>;

    uint16 totalLayers <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 resolutionX <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 resolutionY <fgcolor=cBlack, bgcolor=cWhite>;

    ubyte offset[64];

    rgbPreviewImageRawData preview(116*116*2);
    ubyte rn0[2] <fgcolor=cBlack, bgcolor=cRed>;

    rgbPreviewImageRawData preview2(290*290*2);
    ubyte rn1[2] <fgcolor=cBlack, bgcolor=cRed>;

    rgbPreviewImageRawData preview2(290*290*2);
    ubyte rn2[2] <fgcolor=cBlack, bgcolor=cRed>;   

    uint32 plateformXLength <fgcolor=cBlack, bgcolor=cWhite>;
    wchar_t plateformX[plateformXLength/2];

    uint32 plateformYLength <fgcolor=cBlack, bgcolor=cWhite>;
    wchar_t plateformY[plateformYLength/2];

    uint32 layerThicknessLength <fgcolor=cBlack, bgcolor=cWhite>;
    wchar_t layerThickness[layerThicknessLength/2];

    uint16 ExposureTime <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 WaitTimeBeforeCure <fgcolor=cBlack, bgcolor=cWhite>; // Cant be 0!
    uint16 BottomExposureTime <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 BottomLayersCount <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 BottomLiftHeight <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 BottomLiftSpeed <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 LiftHeight <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 LiftSpeed <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 RetractSpeed <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 BottomLightPWM <fgcolor=cBlack, bgcolor=cWhite>;
    uint16 LightPWM <fgcolor=cBlack, bgcolor=cWhite>;

} header;

struct LAYER_DEF {
    local int i;
    for( i = 0; i < header.totalLayers; i++ ){
        layerDef lD();
    }
    ubyte rn3[2] <fgcolor=cBlack, bgcolor=cRed>;
} layerDefs;

if(header.version >= 3){
    struct SLICER_INFO {
        uint32 SoftwareNameSize;
        char SoftwareName[SoftwareNameSize];
        uint32 MaterialNameSize;
        char MaterialName[MaterialNameSize];
        ubyte offset[67-SoftwareNameSize-MaterialNameSize];
        ubyte rn0[2] <fgcolor=cBlack, bgcolor=cRed>;
    } slicerInfo;
}


struct LAYERS {
    local int i;
    for( i = 0; i < header.totalLayers; i++ ){
        layerData lD();
    }
} layers;
 
struct FOOTER {
    uint32 footerSize <fgcolor=cBlack, bgcolor=cWhite>;
    char str[footer.footerSize] <fgcolor=cBlack, bgcolor=cRed>;

    uint checkSum <fgcolor=cBlack, bgcolor=cWhite>;
} footer;