//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File: ctb
// Author: Tim Slater
// Revision: 1
// Purpose: CTB File Format
//--------------------------------------

LittleEndian();

struct HEADER {
    uint Magic <fgcolor=cBlack, bgcolor=cRed, format=hex>;
    uint HeaderSize <fgcolor=cBlack, bgcolor=cRed>;
    uint HeaderOffset <fgcolor=cBlack, bgcolor=cRed, format=hex>;
    uint unknown1;
    uint Version;
    uint SignatureSize <fgcolor=cBlack, bgcolor=cRed>;
    uint SignatureOffset <fgcolor=cBlack, bgcolor=cRed, format=hex>;
    uint unknown2;
    ushort unknown3;
    ushort unknown4;
    uint unknown5;
    uint unknown6;
    uint unknown7 <fgcolor=cBlack, bgcolor=cRed>;
} header;

FSeek(header.HeaderOffset);

struct DECRYPTED_HEADER {
    uint64 ChecksumValue;
    uint LayerTableOffset;
    float DisplayWidth;
    float DisplayHeight;
    float MachineZ;
    uint Unknown1;
	uint Unknown2;
    float TotalHeightMilimeter;
    float LayerHeight;
    float ExposureTime;
    float BottomExposureTime;
    float LightOffDelay;
    uint BottomLayerCount;
    uint ResolutionX;
    uint ResolutionY;
    uint LayerCount;
    uint LargePreviewOffset;
    uint SmallPreviewOffset;
    uint PrintTime;
    uint ProjectorType;
    float BottomLiftHeight;
    float BottomLiftSpeed;
    float LiftHeight;
    float LiftSpeed;
    float RetractSpeed; /* might be bottom retract speed, need to verify */
    float ModelVolume;
    float ModelWeight;
    float Cost;
    float BottomLightOffDelay;
    uint Unknown3;
    ushort LightPWM; /* these might be in the wrong order */
    ushort BottomLightPWM;
    uint LayerXorKey;
    float BottomLiftHeight2;
    float BottomLiftSpeed2;
    float LiftingHeight2;
    float LiftingSpeed2;
    float RetractHeight2;
    float RetractSpeed2;
    float RestTimeAfterLift;
    uint PrinterNameOffset;
    uint PrinterNameSize;
    ubyte AntiAliasFlag <fgcolor=cBlack, bgcolor=cRed>; // 7(0x7) [No AA] / 15(0x0F) [AA]
    ushort Padding <fgcolor=cBlack, bgcolor=cRed>; 
    ubyte PerLayerSettings <fgcolor=cBlack, bgcolor=cRed, format=hex>; // 0 to not support, 0x40 or 0x50, 16 * version?
    uint unknown4;
    uint unknown5;
    float RestTimeAfterRetract;
    float RestTimeAfterLift;
    uint TransitionLayerCount;
    float BottomRetractSpeed;
    float BottomRetractSpeed2;
    uint Padding1;
    float Four1;
    uint Padding2;
    float Four2;
    float RestTimeAfterRetract;
    float RestTimeAfterLift;
    float RestTimeBeforeLift;
    float BottomRetractHeight;
    float unknown6;
    uint unknown7;
    uint unknown8;
    uint LastLayerIndex;
    uint Padding3;
    uint Padding4;
    uint Padding5;
    uint Padding6;
    uint DisclaimerOffset;
    uint DisclaimerSize;
    uint Padding7;
    uint ResinParametersAddress;
    uint Padding9;
    uint Padding10;
};


DECRYPTED_HEADER decryptedHeader;

struct PREVIEW {
    uint ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    uint ResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageOffset <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageLength <fgcolor=cBlack, bgcolor=cRed>;

    byte Data[ImageLength] <fgcolor=cBlack, bgcolor=cGreen>;
} LargePreview;

PREVIEW SmallPreview;

FSeek(decryptedHeader.PrinterNameOffset);
char MachineName[decryptedHeader.PrinterNameSize] <fgcolor=cBlack, bgcolor=cYellow>;

char Disclaimer[320] <fgcolor=cBlack, bgcolor=cPurple>;


if (header.Version >= 5 && decryptedHeader.ResinParametersAddress > 0)
{
    FSeek(decryptedHeader.ResinParametersAddress);
    struct RESIN_PARAMETERS {
        uint Padding <fgcolor=cBlack, bgcolor=cYellow>;
        ubyte ResinColorB <fgcolor=cBlack, bgcolor=cYellow>;
        ubyte ResinColorG <fgcolor=cBlack, bgcolor=cYellow>;
        ubyte ResinColorR <fgcolor=cBlack, bgcolor=cYellow>;
        ubyte ResinColorA <fgcolor=cBlack, bgcolor=cYellow>;
        uint MachineNameAddress <fgcolor=cBlack, bgcolor=cYellow>;
        uint ResinTypeLength <fgcolor=cBlack, bgcolor=cYellow>;
        uint ResinTypeAddress <fgcolor=cBlack, bgcolor=cYellow>;
        uint ResinNameLength <fgcolor=cBlack, bgcolor=cYellow>;
        uint ResinNameAddress <fgcolor=cBlack, bgcolor=cYellow>;
        uint MachineNameLength <fgcolor=cBlack, bgcolor=cYellow>;
        float ResinDensity <fgcolor=cBlack, bgcolor=cYellow>;
        uint Padding <fgcolor=cBlack, bgcolor=cYellow>;
        char ResinType[ResinTypeLength] <fgcolor=cBlack, bgcolor=cYellow>;
        char ResinName[ResinNameLength] <fgcolor=cBlack, bgcolor=cYellow>;
        char MachineName[MachineNameLength] <fgcolor=cBlack, bgcolor=cYellow>;
    } resinParameters;
}


FSeek(decryptedHeader.LayerTableOffset);

/* need to walk the layer index table to get a count of them.
   the actual count field is in the encrypted header */

struct LAYER_POINTER {
    uint Offset;
    uint PageNumber;
    uint LayerTableSize;
    uint Padding2;
} layerPointers[decryptedHeader.LayerCount];

struct LAYER_HEADER{
    uint LayerMarker <hidden=true>;
    float PositionZ;
    float ExposureTime;
    float LightOffDelay;
    uint LayerDataOffset;
    uint PageNumber;
    uint LayerDataLength;
    uint unknown3;
    uint EncryptedDataOffset;
    uint EncryptedDataLength;
    float LiftHeight;
    float LiftSpeed;
    float LiftHeight2;
    float LiftSpeed2;
    float RetractSpeed;
    float RetractHeight2;
    float RetractSpeed2;
    float RestTimeBeforeLift;
    float RestTimeAfterLift;
    float RestTimeAfterRetract;
    float LightPWM; /* just a guess, has value 255 as a float */
    uint unknown6;
};

struct LAYER {
    LAYER_HEADER layerHeader;
    FSeek(layerHeader.PageNumber * 4294967296 + layerHeader.LayerDataOffset);

    /* do we have encrypted data? */
    if (layerHeader.EncryptedDataLength > 0) {

        if (layerHeader.EncryptedDataOffset > 0) {
            ubyte normalLayerData1[layerHeader.EncryptedDataOffset];
            ubyte encrytedLayerData[layerHeader.EncryptedDataLength];
            ubyte normalLayerData2[layerHeader.LayerDataLength - (layerHeader.EncryptedDataOffset + layerHeader.EncryptedDataLength)];
        } else {
            ubyte encrytedLayerData[layerHeader.EncryptedDataLength];
            ubyte normalLayerData[layerHeader.LayerDataLength - layerHeader.EncryptedDataLength];
        }

    } else {
        ubyte layerData[layerHeader.LayerDataLength] <format=binary>;
    }
};

struct LAYERS {
	local uint x;
	for(x = 0; x < decryptedHeader.LayerCount; x++) {
		FSeek(layerPointers[x].PageNumber * 4294967296 + layerPointers[x].Offset);
		LAYER layer;
	}
} layers;

struct FOOTER {
    if (header.Version >= 5)
    {
        uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
        uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    }
    ubyte Sha256Hash[32]<format=hex, fgcolor=cBlack, bgcolor=cGreen>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
} footer;
