//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: phz
//   Authors: Tiago Conceição
//------------------------------------------------

LittleEndian();

struct HEADER {
    uint Magic <fgcolor=cBlack, bgcolor=cRed>;
    uint Version <fgcolor=cBlack, bgcolor=cRed>;
	float LayerHeightMilimeter <fgcolor=cBlack, bgcolor=cRed>;
    float LayerExposureSeconds <fgcolor=cBlack, bgcolor=cRed>;
	float BottomExposureSeconds <fgcolor=cBlack, bgcolor=cRed>;
	uint BottomLayersCount <fgcolor=cBlack, bgcolor=cRed>;
	uint ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    uint ResolutionY <fgcolor=cBlack, bgcolor=cRed>;	
	uint PreviewLargeOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint LayersDefinitionOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint LayerCount <fgcolor=cBlack, bgcolor=cRed>;
    uint PreviewSmallOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint PrintTime <fgcolor=cBlack, bgcolor=cRed>;
	uint ProjectorType <fgcolor=cBlack, bgcolor=cRed>;
	uint AntiAliasLevel <fgcolor=cBlack, bgcolor=cRed>;
	ushort LightPWM <fgcolor=cBlack, bgcolor=cRed>;
    ushort BottomLightPWM <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	float TotalHeightMilimeter <fgcolor=cBlack, bgcolor=cRed>;
    float BedSizeX <fgcolor=cBlack, bgcolor=cRed>;
    float BedSizeY <fgcolor=cBlack, bgcolor=cRed>;
    float BedSizeZ <fgcolor=cBlack, bgcolor=cRed>;
    uint EncryptionKey <fgcolor=cBlack, bgcolor=cRed>; 
    float BottomLightOffDelay <fgcolor=cBlack, bgcolor=cRed>;
    float LightOffDelay <fgcolor=cBlack, bgcolor=cRed>;
    uint BottomLayersCount2 <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	float BottomLiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float LiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float RetractSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float VolumeMl <fgcolor=cBlack, bgcolor=cRed>;
    float WeightG <fgcolor=cBlack, bgcolor=cRed>;
    float CostDollars <fgcolor=cBlack, bgcolor=cRed>; 
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint MachineNameAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint MachineNameSize <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint EncryptionMode <fgcolor=cBlack, bgcolor=cRed>;
	uint TimestampMinutes <fgcolor=cBlack, bgcolor=cRed>;
	uint AntiAliasLevelInfo <fgcolor=cBlack, bgcolor=cRed>;
	uint SoftwareVersion <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
	uint Padding <fgcolor=cBlack, bgcolor=cRed>;
} header;

struct PREVIEW {
    uint ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    uint ResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageOffset <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageLength <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown1 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown2 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown3 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown4 <fgcolor=cBlack, bgcolor=cRed>;

    ubyte Data[ImageLength] <fgcolor=cBlack, bgcolor=cYellow>;
};

if(header.PreviewLargeOffsetAddress > 0)
{
    FSeek(header.PreviewLargeOffsetAddress);
    PREVIEW previewLarge <fgcolor=cBlack, bgcolor=cYellow>;
}
if(header.PreviewSmallOffsetAddress > 0)
{
    FSeek(header.PreviewSmallOffsetAddress);
    PREVIEW previewSmall <fgcolor=cBlack, bgcolor=cYellow>;
}

if(header.MachineNameAddress > 0 && header.MachineNameSize > 0)
{
    FSeek(header.MachineNameAddress);
    char MachineName[header.MachineNameSize] <fgcolor=cBlack, bgcolor=cGreen>;
}

struct LAYER_DATA {
    float PositionZ <fgcolor=cBlack, bgcolor=cRed>;
    float Exposure <fgcolor=cBlack, bgcolor=cRed>;
    float LightOffSeconds <fgcolor=cBlack, bgcolor=cRed>;
    uint DataAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint DataSize <fgcolor=cBlack, bgcolor=cRed>;
    uint PageNumber <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
};

typedef struct(int size) {
    ubyte layerDataBlock[size] <fgcolor=cBlack, bgcolor=cGreen>;
} LAYER_RLE;

FSeek(header.LayersDefinitionOffsetAddress);
struct LAYERS {
    
    local int i = 0;
    local uint currentPos;
	for( i = 0; i < header.LayerCount; i++ ){
		LAYER_DATA layerData <fgcolor=cBlack, bgcolor=cYellow>;
        currentPos = FTell();
		FSeek(layerData.PageNumber * 4294967296 + layerData.DataAddress);
		LAYER_RLE layerRLE(layerData.DataSize);
        FSeek(currentPos);
	}

} layers;
