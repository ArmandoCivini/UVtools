//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: cxdlpv4
//   Authors: Tiago Conceição
//------------------------------------------------

LittleEndian();

struct HEADER {
    BigEndian();
    uint32 MagicSize <fgcolor=cBlack, bgcolor=cWhite>;
    char Magic[MagicSize] <fgcolor=cBlack, bgcolor=cRed>;
    ushort Version <fgcolor=cBlack, bgcolor=cRed>;
    
    uint32 PrinterModelSize <fgcolor=cBlack, bgcolor=cWhite>;
    char PrinterModel[PrinterModelSize] <fgcolor=cBlack, bgcolor=cRed>;
    LittleEndian();

    ushort ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    ushort ResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    
    float BedSizeX <fgcolor=cBlack, bgcolor=cRed>;
    float BedSizeY <fgcolor=cBlack, bgcolor=cRed>;
    float BedSizeZ <fgcolor=cBlack, bgcolor=cRed>;
    
    float TotalHeightMilimeter <fgcolor=cBlack, bgcolor=cRed>;
    float LayerHeightMilimeter <fgcolor=cBlack, bgcolor=cRed>;
    uint BottomLayersCount <fgcolor=cBlack, bgcolor=cRed>;

    uint PreviewSmallOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint LayersDefinitionOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint LayerCount <fgcolor=cBlack, bgcolor=cRed>;
    uint PreviewLargeOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint PrintTime <fgcolor=cBlack, bgcolor=cRed>;
    uint ProjectorType <fgcolor=cBlack, bgcolor=cRed>;
    uint PrintParametersOffsetAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint PrintParametersSize <fgcolor=cBlack, bgcolor=cRed>;
    uint AntiAliasLevel <fgcolor=cBlack, bgcolor=cRed>;
    ushort LightPWM <fgcolor=cBlack, bgcolor=cRed>;
    ushort BottomLightPWM <fgcolor=cBlack, bgcolor=cRed>;
    uint EncryptionKey <fgcolor=cBlack, bgcolor=cRed>;
    uint SlicerOffset <fgcolor=cBlack, bgcolor=cRed>;
    uint SlicerSize <fgcolor=cBlack, bgcolor=cRed>; 
} header;

struct PREVIEW {
    uint ResolutionX <fgcolor=cBlack, bgcolor=cRed>;
    uint ResolutionY <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageOffset <fgcolor=cBlack, bgcolor=cRed>;
    uint ImageLength <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown1 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown2 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown3 <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown4 <fgcolor=cBlack, bgcolor=cRed>;

    ubyte Data[ImageLength] <fgcolor=cBlack, bgcolor=cYellow>;
};

struct PRINT_PARAMETERS {
    float BottomLiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float LiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float RetractSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float VolumeMl <fgcolor=cBlack, bgcolor=cRed>;
    float WeightG <fgcolor=cBlack, bgcolor=cRed>;
    float CostDollars <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLightOffDelay <fgcolor=cBlack, bgcolor=cRed>;
    float LightOffDelay <fgcolor=cBlack, bgcolor=cRed>;

    uint BottomLayerCount <fgcolor=cBlack, bgcolor=cRed>;
    float ExposureTime <fgcolor=cBlack, bgcolor=cRed>;
    float BottomExposureTime <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
};

struct SLICER_INFO {
    float BottomLiftHeight2 <fgcolor=cBlack, bgcolor=cRed>;
    float BottomLiftSpeed2 <fgcolor=cBlack, bgcolor=cRed>;
    float LiftHeight2 <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed2 <fgcolor=cBlack, bgcolor=cRed>;
    float RetractHeight2 <fgcolor=cBlack, bgcolor=cRed>;
    float RetractSpeed2 <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeAfterLift <fgcolor=cBlack, bgcolor=cRed>;

    uint PerLayerSettings <fgcolor=cBlack, bgcolor=cRed, format=hex>; // 0 to not support, 1 to support
    uint TimestampMinutes <fgcolor=cBlack, bgcolor=cRed>; 
    uint AntiAliasLevel <fgcolor=cBlack, bgcolor=cRed>;
    uint SoftwareVersion <fgcolor=cBlack, bgcolor=cRed, format=hex>; // 0
    float RestTimeAfterRetract <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeBeforeLift <fgcolor=cBlack, bgcolor=cRed>;
    float BottomExposureTime <fgcolor=cBlack, bgcolor=cRed>;
    float ExposureTime <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeAfterLift <fgcolor=cBlack, bgcolor=cRed>;
    uint TransitionLayerCount <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
    uint Padding <fgcolor=cBlack, bgcolor=cRed>;
};

if(header.PreviewSmallOffsetAddress > 0)
{
    FSeek(header.PreviewSmallOffsetAddress);
    PREVIEW previewSmall <fgcolor=cBlack, bgcolor=cYellow>;
}

if(header.PreviewLargeOffsetAddress > 0)
{
    FSeek(header.PreviewLargeOffsetAddress);
    PREVIEW previewLarge <fgcolor=cBlack, bgcolor=cYellow>;
}

if(header.PrintParametersOffsetAddress > 0){
    FSeek(header.PrintParametersOffsetAddress);
    PRINT_PARAMETERS parameters <fgcolor=cBlack, bgcolor=cYellow>;
}

if(header.SlicerOffset > 0){
    FSeek(header.SlicerOffset);
    SLICER_INFO SlicerInfo <fgcolor=cBlack, bgcolor=cYellow>;
}

struct LAYER_DATA {
    float LayerPositionZ <fgcolor=cBlack, bgcolor=cRed>;
    float LayerExposure <fgcolor=cBlack, bgcolor=cRed>;
    float LightOffSeconds <fgcolor=cBlack, bgcolor=cRed>;
    uint DataAddress <fgcolor=cBlack, bgcolor=cRed>;
    uint DataSize <fgcolor=cBlack, bgcolor=cRed>;
    uint DataType <fgcolor=cBlack, bgcolor=cRed>;
    uint CentroidDistance <fgcolor=cBlack, bgcolor=cRed>;
    uint TotalArea <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
    uint Unknown <fgcolor=cBlack, bgcolor=cRed>;
};

struct LAYER_DATAEX {
    float LiftHeight <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float LiftHeight2 <fgcolor=cBlack, bgcolor=cRed>;
    float LiftSpeed2 <fgcolor=cBlack, bgcolor=cRed>;
    float RetractSpeed <fgcolor=cBlack, bgcolor=cRed>;
    float RetractHeight2 <fgcolor=cBlack, bgcolor=cRed>;
    float RetractSpeed2 <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeBeforeLift <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeAfterLift <fgcolor=cBlack, bgcolor=cRed>;
    float RestTimeAfterRetract <fgcolor=cBlack, bgcolor=cRed>;
    float LightPWM <fgcolor=cBlack, bgcolor=cRed>;
};


typedef struct(int size) {
    ubyte layerDataBlock[size] <fgcolor=cBlack, bgcolor=cGreen>;
} LAYER_RLE;

FSeek(header.LayersDefinitionOffsetAddress);
struct LAYERS {
    local uint i;
    for( i = 0; i < header.LayerCount; i++ ){
        LAYER_DATA layerData <fgcolor=cBlack, bgcolor=cYellow>;
    }
} layers;

struct LAYERSEX {
    local uint i;

    for( i = 0; i < header.LayerCount; i++ ){
        LAYER_DATAEX layerDataEx;
        LAYER_RLE lD(layers.layerData[i].DataSize - 44);
    }

} layersEx;


BigEndian();
uint CheckSum <fgcolor=cBlack, bgcolor=cWhite>;
LittleEndian();