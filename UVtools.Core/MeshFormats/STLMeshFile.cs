using System;
using System.IO;
using System.Numerics;
using System.Text;

namespace UVtools.Core.MeshFormats
{
    public enum STLFormat
    {
        ASCII, BINARY
    }
    public class STLMeshFile : MeshFile
    {
        STLFormat outputFormat;
        string objectName;
        FileStream stream;
        StreamWriter asciiWriter;
        uint triangleCount;
        public STLMeshFile(string filePath, STLFormat format, string name = null) : base(filePath)
        {
            outputFormat = format;
            objectName = name ?? "UVTools STL Object";
        }

        public override void Create()
        {
            stream = File.Create(FilePath);

            if (outputFormat == STLFormat.ASCII)
            {
                asciiWriter = new StreamWriter(stream);

                asciiWriter.WriteLine($"solid \"{objectName}\"");
            }
            else
            {
                byte[] header = new byte[80];
                byte[] headerText = UTF8Encoding.UTF8.GetBytes("STL File Generated by UVTools");
                Array.Copy(headerText, header, headerText.Length);
                stream.Write(header);
                stream.Position += 4;
            }
        }

        public override void WriteTriangle(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 normal)
        {
            if (outputFormat == STLFormat.ASCII)
            {
                asciiWriter.WriteLine($"  facet normal {normal.X} {normal.Y} {normal.Z}");
                asciiWriter.WriteLine("    outer loop");

                asciiWriter.WriteLine($"      vertex {p1.X.ToString("E11")} {p1.Y.ToString("E11")} {p1.Z.ToString("E11")}");
                asciiWriter.WriteLine($"      vertex {p2.X.ToString("E11")} {p2.Y.ToString("E11")} {p2.Z.ToString("E11")}");
                asciiWriter.WriteLine($"      vertex {p3.X.ToString("E11")} {p3.Y.ToString("E11")} {p3.Z.ToString("E11")}");

                asciiWriter.WriteLine("    endloop");
                asciiWriter.WriteLine("  endfacet");
            } else
            {
                triangleCount++;

                stream.Write(BitConverter.GetBytes(normal.X));
                stream.Write(BitConverter.GetBytes(normal.Y));
                stream.Write(BitConverter.GetBytes(normal.Z));

                stream.Write(BitConverter.GetBytes(p1.X));
                stream.Write(BitConverter.GetBytes(p1.Y));
                stream.Write(BitConverter.GetBytes(p1.Z));

                stream.Write(BitConverter.GetBytes(p2.X));
                stream.Write(BitConverter.GetBytes(p2.Y));
                stream.Write(BitConverter.GetBytes(p2.Z));

                stream.Write(BitConverter.GetBytes(p3.X));
                stream.Write(BitConverter.GetBytes(p3.Y));
                stream.Write(BitConverter.GetBytes(p3.Z));

                stream.Write(new byte[2]);
            }
        }

        public override void Close()
        {
            if (asciiWriter is not null)
            {
                asciiWriter.WriteLine($"endsolid \"{objectName}\"");
                asciiWriter.Flush();
                asciiWriter.Close();
            } else
            {
                stream.Position = 80;
                stream.Write(BitConverter.GetBytes(triangleCount));
                stream.Flush();
                stream.Close();
            }
        }

        

    }
}
